'''
顺序模型是多个网络层的线性堆叠。
可以通过将网络底层实例是列表传递给Sequential的构造器，来创建一个Sequentail模型。
'''
from keras.models import Sequential
from keras.layers import Dense,Activation

model = Sequential([
     Dense(32,input_shape(784,)),
     Activation('relu'),
     Dense(10),
     Activation('softmax')
])

'''
也可以通过.add()方法将各层添加到模型中
'''

model = Sequential()
model.add(Dense(32,input_dim = 784))
model.add(Activation('relu'))

'''
输入指定数据的尺寸。
传递一个 input_shape 参数给第一层。它是一个表示尺寸的元组 (一个整数或 None 的元组，其中 None 表示可能为任何正整数)。在 input_shape 中不包含数据的 batch 大小。
某些 2D 层，例如 Dense，支持通过参数 input_dim 指定输入尺寸，某些 3D 时序层支持 input_dim 和 input_length 参数。
如果你需要为你的输入指定一个固定的 batch 大小（这对 stateful RNNs 很有用），你可以传递一个 batch_size 参数给一个层。如果你同时将 batch_size=32 和 input_shape=(6, 8) 传递给一个层，那么每一批输入的尺寸就为 (32，6，8)。
'''

'''
下面代码是等价的
'''
model = Sequential()
model.add(Dense(32,input_shape=(784,)))

model = Sequential()
modle.add(Dese(32,input_dim = 784))

'''
模型编译，在训练之前，通过compile方法配置，有三个参数。
优化器  optimizer:可以用现有的优化器的字符串标识符，如rmsprop,adagrad,也可以是Optimizer类的实例。
损失函数 loss ,categorical_crossentroy,mse,目标函数。
评估标准 metrics. metrics = ['accuracy']
'''
#多分类问题
model.compile(
        optimizer = 'rmsprop',
        loss = 'categorical_crossentropy',
        metrics = ['accuracy'])

#二分类问题
model.compile(
        optimizer = 'rmsprop',
        loss = 'binary_crossentropy',
        metrics = ['accuracy'])
        
#均方误差回归问题
model.compile(
        optimizer = 'rmsprop',
        loss = 'mse')
        
#自定义评估标准函数
import keras.backend as k

def means_pres(y_true,y_pred):
        return k.mean(y_pred)
        
model.compile(
        optimizer = 'rmsprop',
        loss = 'binary_crossentropy',
        metrics = ['accuracy',menas_pres])
